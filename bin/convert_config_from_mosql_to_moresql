#!/usr/bin/env ruby

require 'yaml'
require 'json'

FILEPATH = ARGV[0] || "collections.yml"
yaml = YAML.load_file(FILEPATH)

## Prior Structure
# mongodb:
#   blog_posts:
#     :columns:
#     - id:
#       :source: _id
#       :type: TEXT
#     - author_name:
#       :source: author.name
#       :type: TEXT
#     - author_bio:
#       :source: author.bio
#       :type: TEXT
#     - title: TEXT
#     - created: DOUBLE PRECISION
#     :meta:
#       :table: blog_posts
#       :extra_props: true

## New Structure
# {
#   "production-db": {
#     "collections": {
#       "accounts": {
#         "name": "accounts",
#         "pg_table": "accounts",
#         "fields": {
#           "_id": {
#             "mongo": {
#               "name": "_id",
#               "type": "id"
#             },
#             "postgres": {
#               "name": "_id",
#               "type": "text"
#             }
#           },
#           "bio": {
#             "mongo": {
#               "name": "bio",
#               "type": "text"
#             },
#             "postgres": {
#               "name": "bio",
#               "type": "text"
#             }
#           },

def convert_columns(cols)
  cols.each_with_object({}) do |kv, acc|
    k, v = kv.to_a.first
    case v
    when String
      acc[k] = v
    else
      # Get the key from kv
      k = kv.invert[nil]
      acc[kv[:source]] = {
        mongo: {name: kv[:source] , type: kv[:type]},
        postgres: {name: k, type: kv[:type]},
      }
    end
  end
end

result = yaml.each_with_object({}) do |m, acc|
  db, collections = m
  acc[db] = {}
  acc[db]["collections"] = {}
  collections.each do |name, v|
    cols = convert_columns(v[:columns])
    colls = acc[db]["collections"]
    colls[name] = {'name' => col,
                   'pg_table' => col,
                   'fields' => cols}
  end
end

File.write("moresql.json", JSON.pretty_generate(result))
